{
  "__inputs": [
    {
      "name": "DS_TESLAMATE",
      "label": "TeslaMate",
      "description": "",
      "type": "datasource",
      "pluginId": "postgres",
      "pluginName": "PostgreSQL"
    }
  ],
  "__elements": [],
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "8.3.4"
    },
    {
      "type": "datasource",
      "id": "postgres",
      "name": "PostgreSQL",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "$$hashKey": "object:858",
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1643283857827,
  "links": [
    {
      "$$hashKey": "object:972",
      "icon": "dashboard",
      "tags": [],
      "title": "TeslaMate",
      "tooltip": "",
      "type": "link",
      "url": "[[base_url:raw]]"
    },
    {
      "$$hashKey": "object:973",
      "asDropdown": true,
      "icon": "external link",
      "tags": [
        "Custom"
      ],
      "title": "Dashboards",
      "type": "dashboards"
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "fieldConfig": {
        "defaults": {
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgba(0, 0, 0, 0.7)",
                "value": null
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Distance"
            },
            "properties": [
              {
                "id": "unit",
                "value": "lengthkm"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Durée"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dthms"
              },
              {
                "id": "decimals"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consommation Affichée"
            },
            "properties": [
              {
                "id": "unit",
                "value": "Wh/km"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consommation Théorique"
            },
            "properties": [
              {
                "id": "unit",
                "value": "Wh/km"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Énergie"
            },
            "properties": [
              {
                "id": "unit",
                "value": "kwatth"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Vitesse"
            },
            "properties": [
              {
                "id": "unit",
                "value": "velocitykmh"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Batterie"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "% Départ"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": " % Arrivée"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "T °C"
            },
            "properties": [
              {
                "id": "unit",
                "value": "celsius"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Efficience"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percentunit"
              },
              {
                "id": "decimals",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "duration_sec"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dthms"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 14,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "/.*/",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TESLAMATE}"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH data AS (\n  SELECT\n    round(extract(epoch FROM start_date)) * 1000 AS start_date_ts,\n    round(extract(epoch FROM end_date)) * 1000 AS end_date_ts,\n    car.id as car_id,\n    CASE WHEN start_geofence.id IS NULL THEN CONCAT('new?lat=', start_position.latitude, '&lng=', start_position.longitude)\n         WHEN start_geofence.id IS NOT NULL THEN CONCAT(start_geofence.id, '/edit')\n    END as start_path,\n    CASE WHEN end_geofence.id IS NULL THEN CONCAT('new?lat=', end_position.latitude, '&lng=', end_position.longitude)\n         WHEN end_geofence.id IS NOT NULL THEN CONCAT(end_geofence.id, '/edit')\n    END as end_path,\n    TO_CHAR((duration_min * INTERVAL '1 minute'), 'HH24:MI') as duration_str,\n    drives.id as drive_id,\n    -- Columns\n    start_date,\n    COALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city)) AS start_address,\n    COALESCE(end_geofence.name, CONCAT_WS(', ', COALESCE(end_address.name, nullif(CONCAT_WS(' ', end_address.road, end_address.house_number), '')), end_address.city)) AS end_address,\n    duration_min,\n    duration_min*60 as duration_sec,\n    distance,\n    start_position.usable_battery_level as start_usable_battery_level,\n    start_position.battery_level as start_battery_level,\n    end_position.usable_battery_level as end_usable_battery_level,\n    end_position.battery_level as end_battery_level,\n   case when (start_position.battery_level != start_position.usable_battery_level OR end_position.battery_level != end_position.usable_battery_level) = true then true else false end  as reduced_range,\n    duration_min > 1 AND distance > 1 AND ( \n      start_position.usable_battery_level IS NULL OR end_position.usable_battery_level IS NULL\tOR\n      (end_position.battery_level - end_position.usable_battery_level) = 0 \n    ) as is_sufficiently_precise,\n    NULLIF(GREATEST(start_[[preferred_range]]_range_km - end_[[preferred_range]]_range_km, 0), 0) as range_diff,\n    car.efficiency as car_efficiency,\n    outside_temp_avg,\n    distance / NULLIF(duration_min, 0) * 60 AS avg_speed,\n    power_max\n  FROM drives\n  LEFT JOIN addresses start_address ON start_address_id = start_address.id\n  LEFT JOIN addresses end_address ON end_address_id = end_address.id\n  LEFT JOIN positions start_position ON start_position_id = start_position.id\n  LEFT JOIN positions end_position ON end_position_id = end_position.id\n  LEFT JOIN geofences start_geofence ON start_geofence_id = start_geofence.id\n  LEFT JOIN geofences end_geofence ON end_geofence_id = end_geofence.id\n  LEFT JOIN cars car ON car.id = drives.car_id\n  WHERE $__timeFilter(start_date) AND drives.car_id = $car_id \n  AND convert_km(distance::numeric, '$length_unit') / NULLIF(duration_min, 0) * 60 >= $min_speed \n  AND convert_km(distance::numeric, '$length_unit') / NULLIF(duration_min, 0) * 60 <= $max_speed \n  AND ('${geofence:pipe}' = '-1' OR start_geofence.id in ($geofence))\n  AND ('${geofence_end:pipe}' = '-1' OR end_geofence.id in ($geofence_end))\n  AND distance > $distance_min\n  AND NULLIF(GREATEST(start_[[preferred_range]]_range_km - end_[[preferred_range]]_range_km, 0), 0) * 0.94 * car.efficiency / distance * 1000 >= $conso_min\n  AND NULLIF(GREATEST(start_[[preferred_range]]_range_km - end_[[preferred_range]]_range_km, 0), 0) * 0.94 * car.efficiency / distance * 1000 <= $conso_max\n  ORDER BY start_date DESC\n)\nSELECT\n    start_date_ts,\n    end_date_ts,\n    car_id,\n    start_path,\n    end_path,\n    duration_str,\n    drive_id,\n    -- Columns\n        start_date as start_date_[[length_unit]],\n    start_address,\n    end_address,\n    duration_min,\n    duration_sec,\n    convert_km(distance::numeric, '$length_unit') AS distance_$length_unit,\n    range_diff * 0.94 * car_efficiency / distance * 1000 as conso_affiche,\n    convert_km(avg_speed::numeric, '$length_unit') AS speed_avg_$length_unit,\n    end_battery_level - start_battery_level as delta_battery,\n    start_battery_level as \"% Start\",\n    end_battery_level as \"% End\",\n    convert_celsius(outside_temp_avg, '$temp_unit') AS outside_temp_$temp_unit,\n    power_max,\n    reduced_range as has_reduced_range,\n    range_diff * car_efficiency as \"consumption_kWh\",\n    CASE WHEN is_sufficiently_precise THEN range_diff * car_efficiency / distance * 1000 * CASE WHEN '$length_unit' = 'km' THEN 1\n                                                                                                WHEN '$length_unit' = 'mi' THEN 1.60934\n                                                                                           END\n              ELSE range_diff * car_efficiency / distance * 1000\n    END AS consumption_kWh_$length_unit,\n        CASE WHEN range_diff >=0 THEN CASE WHEN is_sufficiently_precise THEN distance / range_diff\n                                                                    ELSE distance / range_diff END\n                              ELSE NULL\n    END AS efficiency\nFROM data;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "latitude"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "addresses",
          "timeColumn": "inserted_at",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Statistiques Moyennes",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "car_id": true,
              "drive_id": true,
              "duration_min": true,
              "duration_str": true,
              "end_address": true,
              "end_date_ts": true,
              "end_path": true,
              "has_reduced_range": true,
              "power_max": true,
              "start_address": true,
              "start_date_km": true,
              "start_date_ts": true,
              "start_path": true
            },
            "indexByName": {
              "% End": 18,
              "% Start": 17,
              "car_id": 2,
              "conso_affiche": 13,
              "consumption_kWh": 20,
              "consumption_kwh_km": 14,
              "delta_battery": 16,
              "distance_km": 12,
              "drive_id": 6,
              "duration_min": 10,
              "duration_sec": 11,
              "duration_str": 5,
              "efficiency": 21,
              "end_address": 9,
              "end_date_ts": 1,
              "end_path": 4,
              "has_reduced_range": 23,
              "outside_temp_c": 19,
              "power_max": 22,
              "speed_avg_km": 15,
              "start_address": 8,
              "start_date_km": 7,
              "start_date_ts": 0,
              "start_path": 3
            },
            "renameByName": {
              "% End": " % Arrivée",
              "% Start": "% Départ",
              "conso_affiche": "Consommation Affichée",
              "consumption_kWh": "Énergie",
              "consumption_kwh_km": "Consommation Théorique",
              "delta_battery": "Batterie",
              "distance_km": "Distance",
              "duration_min": "Durée",
              "duration_sec": "Durée",
              "duration_str": "",
              "efficiency": "Efficience",
              "end_address": "",
              "outside_temp_c": "T °C",
              "power_max": "Puissance Max",
              "speed_avg_km": "Vitesse"
            }
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 3
      },
      "id": 4,
      "panels": [],
      "repeat": "car_id",
      "title": "$car_id",
      "type": "row"
    },
    {
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "minWidth": 75
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "start_date_km"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Date"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "unit",
                "value": "time: YYYY-MM-DD HH:mm:ss"
              },
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Voir les Détails du Trajet",
                    "url": "d/AFPp7rGMz?from=${__data.fields.start_date_ts.numeric}&to=${__data.fields.end_date_ts.numeric}&var-car_id=${__data.fields.car_id.numeric}&var-drive_id=${__data.fields.drive_id.numeric}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "consumption_kwh_100"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Consommation"
              },
              {
                "id": "unit",
                "value": "Wh/km"
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "distance_km"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Distance"
              },
              {
                "id": "unit",
                "value": "lengthkm"
              },
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "consumption_kWh"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Énergie"
              },
              {
                "id": "unit",
                "value": "kwatth"
              },
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_address"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Départ"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Créer ou Modifier un Lieu Favori",
                    "url": "[[base_url:raw]]/geo-fences/${__cell_3:raw}"
                  }
                ]
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "end_address"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Arrivée"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Créer ou Modifier un Lieu Favori",
                    "url": "[[base_url:raw]]/geo-fences/${__cell_4:raw}"
                  }
                ]
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "outside_temp_c"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "T°"
              },
              {
                "id": "unit",
                "value": "celsius"
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "duration_str"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "⏱"
              },
              {
                "id": "unit",
                "value": "none"
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "efficiency"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Efficience"
              },
              {
                "id": "unit",
                "value": "percentunit"
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              },
              {
                "id": "custom.align"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "#F2495C",
                      "value": null
                    },
                    {
                      "color": "#FF9830",
                      "value": 0
                    },
                    {
                      "color": "#37872D",
                      "value": 0
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_ts/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "speed_avg_km"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Vitesse Moyenne"
              },
              {
                "id": "unit",
                "value": "velocitykmh"
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "id"
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "distance_mi"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "mi"
              },
              {
                "id": "unit",
                "value": "lengthmi"
              },
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "outside_temp_f"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Temp"
              },
              {
                "id": "unit",
                "value": "fahrenheit"
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "speed_avg_mi"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Speed"
              },
              {
                "id": "unit",
                "value": "velocitymph"
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/(start|end)_path/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "duration_str"
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "car_id"
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_date_mi"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Date"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "unit",
                "value": "time: MM/DD/YY h:mm:ss a"
              },
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "View drive details",
                    "url": "d/AFPp7rGMz?from=${__cell_0}&to=${__cell_1}&var-car_id=${__cell_2}&var-drive_id=${__cell_6}"
                  }
                ]
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "% Start"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "% Départ"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "% End"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "% Arrivée"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "has_reduced_range"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "❄"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "drive_id"
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": ""
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "power_max"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Puissance Max"
              },
              {
                "id": "unit",
                "value": "kwatt"
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "conso_affiche"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Consommation"
              },
              {
                "id": "unit",
                "value": "Wh/km"
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              },
              {
                "id": "custom.align"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "rgba(50, 172, 45, 0.97)",
                      "value": null
                    },
                    {
                      "color": "rgba(237, 129, 40, 0.89)",
                      "value": 150
                    },
                    {
                      "color": "rgba(245, 54, 54, 0.9)",
                      "value": 200
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "delta_battery"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "🔋"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": ""
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Puissance Max"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 138
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_date_ts"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "end_date_ts"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "car_id"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_path"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "end_path"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "drive_id"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "has_reduced_range"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Départ"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 236
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Arrivée"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 223
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consommation"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 115
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Date"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 155
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "speed_avg_km"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 130
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 24,
        "w": 24,
        "x": 0,
        "y": 4
      },
      "id": 2,
      "links": [],
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "alias": "",
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TESLAMATE}"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH data AS (\n  SELECT\n    round(extract(epoch FROM start_date)) * 1000 AS start_date_ts,\n    round(extract(epoch FROM end_date)) * 1000 AS end_date_ts,\n    car.id as car_id,\n    CASE WHEN start_geofence.id IS NULL THEN CONCAT('new?lat=', start_position.latitude, '&lng=', start_position.longitude)\n         WHEN start_geofence.id IS NOT NULL THEN CONCAT(start_geofence.id, '/edit')\n    END as start_path,\n    CASE WHEN end_geofence.id IS NULL THEN CONCAT('new?lat=', end_position.latitude, '&lng=', end_position.longitude)\n         WHEN end_geofence.id IS NOT NULL THEN CONCAT(end_geofence.id, '/edit')\n    END as end_path,\n    TO_CHAR((duration_min * INTERVAL '1 minute'), 'HH24:MI') as duration_str,\n    drives.id as drive_id,\n    -- Columns\n    start_date,\n    COALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city)) AS start_address,\n    COALESCE(end_geofence.name, CONCAT_WS(', ', COALESCE(end_address.name, nullif(CONCAT_WS(' ', end_address.road, end_address.house_number), '')), end_address.city)) AS end_address,\n    duration_min,\n    duration_min*60 as duration_sec,\n    distance,\n    start_position.usable_battery_level as start_usable_battery_level,\n    start_position.battery_level as start_battery_level,\n    end_position.usable_battery_level as end_usable_battery_level,\n    end_position.battery_level as end_battery_level,\n   case when (start_position.battery_level != start_position.usable_battery_level OR end_position.battery_level != end_position.usable_battery_level) = true then true else false end  as reduced_range,\n    duration_min > 1 AND distance > 1 AND ( \n      start_position.usable_battery_level IS NULL OR end_position.usable_battery_level IS NULL\tOR\n      (end_position.battery_level - end_position.usable_battery_level) = 0 \n    ) as is_sufficiently_precise,\n    NULLIF(GREATEST(start_[[preferred_range]]_range_km - end_[[preferred_range]]_range_km, 0), 0) as range_diff,\n    car.efficiency as car_efficiency,\n    outside_temp_avg,\n    distance / NULLIF(duration_min, 0) * 60 AS avg_speed,\n    power_max\n  FROM drives\n  LEFT JOIN addresses start_address ON start_address_id = start_address.id\n  LEFT JOIN addresses end_address ON end_address_id = end_address.id\n  LEFT JOIN positions start_position ON start_position_id = start_position.id\n  LEFT JOIN positions end_position ON end_position_id = end_position.id\n  LEFT JOIN geofences start_geofence ON start_geofence_id = start_geofence.id\n  LEFT JOIN geofences end_geofence ON end_geofence_id = end_geofence.id\n  LEFT JOIN cars car ON car.id = drives.car_id\n  WHERE $__timeFilter(start_date) AND drives.car_id = $car_id \n  AND convert_km(distance::numeric, '$length_unit') / NULLIF(duration_min, 0) * 60 >= $min_speed \n  AND convert_km(distance::numeric, '$length_unit') / NULLIF(duration_min, 0) * 60 <= $max_speed \n  AND ('${geofence:pipe}' = '-1' OR start_geofence.id in ($geofence))\n  AND ('${geofence_end:pipe}' = '-1' OR end_geofence.id in ($geofence_end))\n  AND distance > $distance_min\n  AND NULLIF(GREATEST(start_[[preferred_range]]_range_km - end_[[preferred_range]]_range_km, 0), 0) * 0.94 * car.efficiency / distance * 1000 >= $conso_min\n  AND NULLIF(GREATEST(start_[[preferred_range]]_range_km - end_[[preferred_range]]_range_km, 0), 0) * 0.94 * car.efficiency / distance * 1000 <= $conso_max\n  ORDER BY start_date DESC\n)\nSELECT\n    start_date_ts,\n    end_date_ts,\n    car_id,\n    start_path,\n    end_path,\n    drive_id,\n    -- Columns\n        start_date as start_date_[[length_unit]],\n    start_address,\n    end_address,\n    duration_min,\n    duration_str,\n    convert_km(distance::numeric, '$length_unit') AS distance_$length_unit,\n    range_diff * 0.94 * car_efficiency / distance * 1000 as conso_affiche,\n    convert_km(avg_speed::numeric, '$length_unit') AS speed_avg_$length_unit,\n    end_battery_level - start_battery_level as delta_battery,\n    start_battery_level as \"% Start\",\n    end_battery_level as \"% End\",\n    convert_celsius(outside_temp_avg, '$temp_unit') AS outside_temp_$temp_unit,\n    power_max,\n    reduced_range as has_reduced_range,\n    range_diff * 0.94 * car_efficiency as \"consumption_kWh\",\n    CASE WHEN is_sufficiently_precise THEN range_diff * car_efficiency / distance * 1000 * CASE WHEN '$length_unit' = 'km' THEN 1\n                                                                                                WHEN '$length_unit' = 'mi' THEN 1.60934\n                                                                                           END\n              ELSE range_diff * car_efficiency / distance * 1000\n    END AS consumption_kWh_$length_unit,\n        CASE WHEN range_diff >=0 THEN CASE WHEN is_sufficiently_precise THEN distance / range_diff\n                                                                    ELSE distance / range_diff END\n                              ELSE NULL\n    END AS efficiency\nFROM data;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Trajets",
      "transformations": [
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {
              "names": [
                "start_date_ts",
                "end_date_ts",
                "car_id",
                "start_path",
                "end_path",
                "duration_str",
                "drive_id",
                "start_date_km",
                "start_address",
                "end_address",
                "duration_sec",
                "distance_km",
                "conso_affiche",
                "speed_avg_km",
                "delta_battery",
                "% Start",
                "% End",
                "outside_temp_c",
                "power_max",
                "has_reduced_range",
                "consumption_kWh",
                "efficiency"
              ]
            }
          }
        },
        {
          "id": "merge",
          "options": {
            "reducers": []
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgba(0, 0, 0, 0.7)",
                "value": null
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Distance"
            },
            "properties": [
              {
                "id": "unit",
                "value": "none"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Durée"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dthms"
              },
              {
                "id": "decimals"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consommation Affichée"
            },
            "properties": [
              {
                "id": "unit",
                "value": "Wh/km"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consommation Théorique"
            },
            "properties": [
              {
                "id": "unit",
                "value": "Wh/km"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Énergie"
            },
            "properties": [
              {
                "id": "unit",
                "value": "kwatth"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Vitesse"
            },
            "properties": [
              {
                "id": "unit",
                "value": "velocitykmh"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Batterie"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "% Départ"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": " % Arrivée"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "T °C"
            },
            "properties": [
              {
                "id": "unit",
                "value": "celsius"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Efficience"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percentunit"
              },
              {
                "id": "decimals",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "duration_sec"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dthms"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 28
      },
      "id": 17,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "count"
          ],
          "fields": "/^Distance$/",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH data AS (\n  SELECT\n    round(extract(epoch FROM start_date)) * 1000 AS start_date_ts,\n    round(extract(epoch FROM end_date)) * 1000 AS end_date_ts,\n    car.id as car_id,\n    CASE WHEN start_geofence.id IS NULL THEN CONCAT('new?lat=', start_position.latitude, '&lng=', start_position.longitude)\n         WHEN start_geofence.id IS NOT NULL THEN CONCAT(start_geofence.id, '/edit')\n    END as start_path,\n    CASE WHEN end_geofence.id IS NULL THEN CONCAT('new?lat=', end_position.latitude, '&lng=', end_position.longitude)\n         WHEN end_geofence.id IS NOT NULL THEN CONCAT(end_geofence.id, '/edit')\n    END as end_path,\n    TO_CHAR((duration_min * INTERVAL '1 minute'), 'HH24:MI') as duration_str,\n    drives.id as drive_id,\n    -- Columns\n    start_date,\n    COALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city)) AS start_address,\n    COALESCE(end_geofence.name, CONCAT_WS(', ', COALESCE(end_address.name, nullif(CONCAT_WS(' ', end_address.road, end_address.house_number), '')), end_address.city)) AS end_address,\n    duration_min,\n    duration_min*60 as duration_sec,\n    distance,\n    start_position.usable_battery_level as start_usable_battery_level,\n    start_position.battery_level as start_battery_level,\n    end_position.usable_battery_level as end_usable_battery_level,\n    end_position.battery_level as end_battery_level,\n   case when (start_position.battery_level != start_position.usable_battery_level OR end_position.battery_level != end_position.usable_battery_level) = true then true else false end  as reduced_range,\n    duration_min > 1 AND distance > 1 AND ( \n      start_position.usable_battery_level IS NULL OR end_position.usable_battery_level IS NULL\tOR\n      (end_position.battery_level - end_position.usable_battery_level) = 0 \n    ) as is_sufficiently_precise,\n    NULLIF(GREATEST(start_[[preferred_range]]_range_km - end_[[preferred_range]]_range_km, 0), 0) as range_diff,\n    car.efficiency as car_efficiency,\n    outside_temp_avg,\n    distance / NULLIF(duration_min, 0) * 60 AS avg_speed,\n    power_max\n  FROM drives\n  LEFT JOIN addresses start_address ON start_address_id = start_address.id\n  LEFT JOIN addresses end_address ON end_address_id = end_address.id\n  LEFT JOIN positions start_position ON start_position_id = start_position.id\n  LEFT JOIN positions end_position ON end_position_id = end_position.id\n  LEFT JOIN geofences start_geofence ON start_geofence_id = start_geofence.id\n  LEFT JOIN geofences end_geofence ON end_geofence_id = end_geofence.id\n  LEFT JOIN cars car ON car.id = drives.car_id\n  WHERE $__timeFilter(start_date) AND drives.car_id = $car_id \n  AND convert_km(distance::numeric, '$length_unit') / NULLIF(duration_min, 0) * 60 >= $min_speed \n  AND convert_km(distance::numeric, '$length_unit') / NULLIF(duration_min, 0) * 60 <= $max_speed \n  AND ('${geofence:pipe}' = '-1' OR start_geofence.id in ($geofence))\n  AND ('${geofence_end:pipe}' = '-1' OR end_geofence.id in ($geofence_end))\n  AND distance > $distance_min\n  AND NULLIF(GREATEST(start_[[preferred_range]]_range_km - end_[[preferred_range]]_range_km, 0), 0) * 0.94 * car.efficiency / distance * 1000 >= $conso_min\n  AND NULLIF(GREATEST(start_[[preferred_range]]_range_km - end_[[preferred_range]]_range_km, 0), 0) * 0.94 * car.efficiency / distance * 1000 <= $conso_max\n  ORDER BY start_date DESC\n)\nSELECT\n    start_date_ts,\n    end_date_ts,\n    car_id,\n    start_path,\n    end_path,\n    duration_str,\n    drive_id,\n    -- Columns\n        start_date as start_date_[[length_unit]],\n    start_address,\n    end_address,\n    duration_min,\n    duration_sec,\n    convert_km(distance::numeric, '$length_unit') AS distance_$length_unit,\n    range_diff * 0.94 * car_efficiency / distance * 1000 as conso_affiche,\n    convert_km(avg_speed::numeric, '$length_unit') AS speed_avg_$length_unit,\n    end_battery_level - start_battery_level as delta_battery,\n    start_battery_level as \"% Start\",\n    end_battery_level as \"% End\",\n    convert_celsius(outside_temp_avg, '$temp_unit') AS outside_temp_$temp_unit,\n    power_max,\n    reduced_range as has_reduced_range,\n    range_diff * car_efficiency as \"consumption_kWh\",\n    CASE WHEN is_sufficiently_precise THEN range_diff * car_efficiency / distance * 1000 * CASE WHEN '$length_unit' = 'km' THEN 1\n                                                                                                WHEN '$length_unit' = 'mi' THEN 1.60934\n                                                                                           END\n              ELSE range_diff * car_efficiency / distance * 1000\n    END AS consumption_kWh_$length_unit,\n        CASE WHEN range_diff >=0 THEN CASE WHEN is_sufficiently_precise THEN distance / range_diff\n                                                                    ELSE distance / range_diff END\n                              ELSE NULL\n    END AS efficiency\nFROM data;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "latitude"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "addresses",
          "timeColumn": "inserted_at",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "#Trajets",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "car_id": true,
              "drive_id": true,
              "duration_min": true,
              "duration_str": true,
              "end_address": true,
              "end_date_ts": true,
              "end_path": true,
              "has_reduced_range": true,
              "power_max": true,
              "start_address": true,
              "start_date_km": true,
              "start_date_ts": true,
              "start_path": true
            },
            "indexByName": {
              "% End": 18,
              "% Start": 17,
              "car_id": 2,
              "conso_affiche": 13,
              "consumption_kWh": 20,
              "consumption_kwh_km": 14,
              "delta_battery": 16,
              "distance_km": 12,
              "drive_id": 6,
              "duration_min": 10,
              "duration_sec": 11,
              "duration_str": 5,
              "efficiency": 21,
              "end_address": 9,
              "end_date_ts": 1,
              "end_path": 4,
              "has_reduced_range": 23,
              "outside_temp_c": 19,
              "power_max": 22,
              "speed_avg_km": 15,
              "start_address": 8,
              "start_date_km": 7,
              "start_date_ts": 0,
              "start_path": 3
            },
            "renameByName": {
              "% End": " % Arrivée",
              "% Start": "% Départ",
              "conso_affiche": "Consommation Affichée",
              "consumption_kWh": "Énergie",
              "consumption_kwh_km": "Consommation Théorique",
              "delta_battery": "Batterie",
              "distance_km": "Distance",
              "duration_min": "Durée",
              "duration_sec": "Durée",
              "duration_str": "",
              "efficiency": "Efficience",
              "end_address": "",
              "outside_temp_c": "T °C",
              "power_max": "Puissance Max",
              "speed_avg_km": "Vitesse"
            }
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    }
  ],
  "refresh": false,
  "schemaVersion": 34,
  "style": "dark",
  "tags": [
    "Custom"
  ],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "SELECT name AS __text, id AS __value FROM cars;",
        "hide": 2,
        "includeAll": true,
        "label": "Car",
        "multi": false,
        "name": "car_id",
        "options": [],
        "query": "SELECT name AS __text, id AS __value FROM cars;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 5,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "select unit_of_temperature from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "label": "temperature unit",
        "multi": false,
        "name": "temp_unit",
        "options": [],
        "query": "select unit_of_temperature from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "select unit_of_length from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "label": "length unit",
        "multi": false,
        "name": "length_unit",
        "options": [],
        "query": "select unit_of_length from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "select preferred_range from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "preferred_range",
        "options": [],
        "query": "select preferred_range from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "select base_url from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "base_url",
        "options": [],
        "query": "select base_url from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": "-1",
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "SELECT name AS __text, id AS __value FROM geofences ORDER BY name COLLATE \"C\" ASC;",
        "hide": 0,
        "includeAll": true,
        "label": "Départ",
        "multi": true,
        "name": "geofence",
        "options": [],
        "query": "SELECT name AS __text, id AS __value FROM geofences ORDER BY name COLLATE \"C\" ASC;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": "-1",
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "SELECT name AS __text, id AS __value FROM geofences ORDER BY name COLLATE \"C\" ASC;",
        "hide": 0,
        "includeAll": true,
        "label": "Arrivée",
        "multi": true,
        "name": "geofence_end",
        "options": [],
        "query": "SELECT name AS __text, id AS __value FROM geofences ORDER BY name COLLATE \"C\" ASC;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": false,
          "text": "0",
          "value": "0"
        },
        "hide": 0,
        "label": "Distance Mini",
        "name": "distance_min",
        "options": [
          {
            "selected": true,
            "text": "0",
            "value": "0"
          }
        ],
        "query": "0",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": false,
          "text": "0",
          "value": "0"
        },
        "description": "Vitesse Minimale",
        "hide": 0,
        "label": "Vitesse Min",
        "name": "min_speed",
        "options": [
          {
            "selected": true,
            "text": "0",
            "value": "0"
          }
        ],
        "query": "0",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": true,
          "text": "250",
          "value": "250"
        },
        "description": "Vitesse Maximale",
        "hide": 0,
        "label": "Vitesse Max",
        "name": "max_speed",
        "options": [
          {
            "selected": true,
            "text": "250",
            "value": "250"
          }
        ],
        "query": "250",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": true,
          "text": "0",
          "value": "0"
        },
        "description": "Consommation Moyenne minimale à afficher",
        "hide": 0,
        "label": "Conso Min",
        "name": "conso_min",
        "options": [
          {
            "selected": true,
            "text": "0",
            "value": "0"
          }
        ],
        "query": "0",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": false,
          "text": "999",
          "value": "999"
        },
        "description": "Consommation Moyenne maximale à afficher",
        "hide": 0,
        "label": "Conso Max",
        "name": "conso_max",
        "options": [
          {
            "selected": true,
            "text": "999",
            "value": "999"
          }
        ],
        "query": "999",
        "skipUrlSync": false,
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-90d",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "Trajets",
  "uid": "rg4MmlpMk",
  "version": 7,
  "weekStart": ""
}