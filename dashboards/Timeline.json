{
  "__inputs": [
    {
      "name": "TeslaMate",
      "label": "TeslaMate",
      "description": "",
      "type": "datasource",
      "pluginId": "postgres",
      "pluginName": "PostgreSQL"
    }
  ],
  "__elements": [],
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "8.3.4"
    },
    {
      "type": "datasource",
      "id": "postgres",
      "name": "PostgreSQL",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1643283853939,
  "links": [
    {
      "asDropdown": false,
      "icon": "dashboard",
      "includeVars": false,
      "keepTime": false,
      "tags": [],
      "targetBlank": false,
      "title": "TeslaMate",
      "tooltip": "",
      "type": "link",
      "url": "[[base_url:raw]]"
    },
    {
      "asDropdown": true,
      "icon": "external link",
      "includeVars": false,
      "keepTime": false,
      "tags": [
        "Custom"
      ],
      "targetBlank": false,
      "title": "Dashboards",
      "tooltip": "",
      "type": "dashboards",
      "url": ""
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "datasource": "${TeslaMate}",
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 4,
      "panels": [],
      "repeat": "car_id",
      "title": "$car_id",
      "type": "row"
    },
    {
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "filterable": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Start"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dateTimeAsLocal"
              },
              {
                "id": "custom.width",
                "value": 180
              },
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "d/n6g9nrMMz/voyage?orgId=1&from=${__data.fields.start_date_ts}&to=${__data.fields.end_date_ts}&var-car_id=$car_id"
                  }
                ]
              },
              {
                "id": "displayName",
                "value": "Début"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SoC"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 70
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "displayName",
                "value": "🔋"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SoC Diff"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 70
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "displayName",
                "value": "Delta 🔋"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_path"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "end_path"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Action"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              },
              {
                "id": "custom.filterable",
                "value": true
              },
              {
                "id": "displayName",
                "value": "État"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "kWh"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              },
              {
                "id": "unit",
                "value": "kwatth"
              },
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "displayName",
                "value": "Delta kWh"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Duration"
            },
            "properties": [
              {
                "id": "unit",
                "value": "m"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Start Address"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Create or edit geo-fence",
                    "url": "[[base_url:raw]]/geo-fences/${__data.fields.start_path}"
                  }
                ]
              },
              {
                "id": "custom.filterable",
                "value": true
              },
              {
                "id": "custom.minWidth",
                "value": 200
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "End Address"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Create or edit geo-fence",
                    "url": "[[base_url:raw]]/geo-fences/${__data.fields.end_path}"
                  }
                ]
              },
              {
                "id": "custom.filterable",
                "value": true
              },
              {
                "id": "custom.minWidth",
                "value": 200
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_date_ts"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "end_date_ts"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "odometer_km"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_km/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "km"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_mi/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "mi"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_c/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "celsius"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_f/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "fahrenheit"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/odometer_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Odometer"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/distance_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Distance"
              },
              {
                "id": "custom.width",
                "value": 100
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/range_diff_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Range Diff"
              },
              {
                "id": "custom.width",
                "value": 100
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/outside_temp_avg_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Temperature"
              },
              {
                "id": "custom.width",
                "value": 100
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/end_range_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Range"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Range"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 118
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Action"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Slot details",
                    "url": "${__data.fields.slotlink}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "slotlink"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "outside_temp_avg_c"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "T°"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "super-light-blue",
                      "value": null
                    },
                    {
                      "color": "light-yellow",
                      "value": 5
                    },
                    {
                      "color": "light-orange",
                      "value": 15
                    },
                    {
                      "color": "light-red",
                      "value": 25
                    }
                  ]
                }
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "odometer_km"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Odomètre"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Start Address"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Départ"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "End Address"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Arrivée"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Duration"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Durée"
              },
              {
                "id": "unit",
                "value": "m"
              },
              {
                "id": "decimals",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "end_range_km"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Autonomie"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "range_diff_km"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Delta km"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 22,
        "w": 24,
        "x": 0,
        "y": 1
      },
      "id": 2,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Start"
          }
        ]
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${TeslaMate}"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  start_date AS \"Start\",\n  end_date AS \"End\",\n  ROUND(EXTRACT(EPOCH FROM start_date))*1000 AS start_date_ts,\n  ROUND(EXTRACT(EPOCH FROM end_date))*1000 AS end_date_ts,\n  '🚗 Conduite' AS \"Action\",\n  drives.duration_min AS \"Duration\",\n  CASE WHEN start_geofence_id IS NULL THEN CONCAT('new?lat=', TP1.latitude, '&lng=', TP1.longitude)\n       WHEN start_geofence_id IS NOT NULL THEN CONCAT(start_geofence_id, '/edit')\n  END AS start_path,\n  CASE WHEN end_geofence_id IS NULL THEN CONCAT('new?lat=', TP2.latitude, '&lng=', TP2.longitude)\n       WHEN start_geofence_id IS NOT NULL THEN CONCAT(end_geofence_id, '/edit')\n  END AS end_path,\n  COALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city)) AS \"Start Address\",\n  COALESCE(end_geofence.name, CONCAT_WS(', ', COALESCE(end_address.name, nullif(CONCAT_WS(' ', end_address.road, end_address.house_number), '')), end_address.city)) AS \"End Address\",\n  convert_km(end_km::NUMERIC, '$length_unit') AS odometer_$length_unit,\n  convert_km(distance::NUMERIC, '$length_unit') AS distance_$length_unit,\n  convert_km(end_[[preferred_range]]_range_km::NUMERIC, '$length_unit') AS end_range_$length_unit,\n  convert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') * efficiency AS \"kWh\",\n  convert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') AS range_diff_$length_unit,\n  TP2.battery_level AS \"SoC\",\n  TP2.battery_level-TP1.battery_level AS \"SoC Diff\",\n  convert_celsius(outside_temp_avg, '$temp_unit') AS outside_temp_avg_$temp_unit,\n  CONCAT('d/AFPp7rGMz/details-du-trajet?orgId=1&from=', ROUND(EXTRACT(EPOCH FROM start_date))*1000, '&to=', ROUND(EXTRACT(EPOCH FROM end_date))*1000, '&var-car_id=', drives.car_id, '&var-drive_id=', drives.id) AS slotlink\nFROM drives\n  LEFT OUTER JOIN positions AS TP1 on drives.start_position_id = TP1.id\n  LEFT OUTER JOIN positions AS TP2 on drives.end_position_id = TP2.id\n  LEFT JOIN addresses start_address ON start_address_id = start_address.id\n  LEFT JOIN addresses end_address ON  end_address_id = end_address.id\n  LEFT JOIN geofences start_geofence ON start_geofence_id = start_geofence.id\n  LEFT JOIN geofences end_geofence ON end_geofence_id = end_geofence.id\n  JOIN cars ON cars.id = drives.car_id\nWHERE \n  $__timeFilter(drives.start_date)\n  AND drives.car_id = $car_id\n  AND '🚗 Conduite' in ($action_filter)\n  AND\n    (COALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city))::TEXT like '%$text_filter%' or\n    COALESCE(end_geofence.name, CONCAT_WS(', ', COALESCE(end_address.name, nullif(CONCAT_WS(' ', end_address.road, end_address.house_number), '')), end_address.city))::TEXT like '%$text_filter%')\n\nUNION\nSELECT\n  start_date AS \"Start\",\n  end_date AS \"End\",\n  ROUND(EXTRACT(EPOCH FROM start_date))*1000 AS start_date_ts,\n  ROUND(EXTRACT(EPOCH FROM end_date))*1000 AS end_date_ts,\n  '🔋 Charge' AS \"Action\",\n  charging_processes.duration_min AS \"Duration\",\n  CASE WHEN geofence_id IS NULL THEN CONCAT('new?lat=', address.latitude, '&lng=', address.longitude)\n       WHEN geofence_id IS NOT NULL THEN CONCAT(geofence_id, '/edit')\n  END AS start_path,\n  NULL AS end_path,\n  COALESCE(geofence.name, CONCAT_WS(', ', COALESCE(address.name, nullif(CONCAT_WS(' ', address.road, address.house_number), '')), address.city)) AS \"Start Address\",\n  '' AS \"End Address\",\n  convert_km(position.odometer::NUMERIC, '$length_unit') AS odometer_$length_unit,\n  NULL AS distance_$length_unit,\n  convert_km(end_[[preferred_range]]_range_km::NUMERIC, '$length_unit') AS end_range_$length_unit,\n  charging_processes.charge_energy_added AS \"kWh\",\n  convert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') AS range_diff_$length_unit, \n  end_battery_level AS \"SoC\",\n  end_battery_level - start_battery_level AS \"SoC Diff\",\n  convert_celsius(outside_temp_avg, '$temp_unit') AS outside_temp_avg_$temp_unit,\n  CONCAT('d/joS3WrMMz/details-de-la-charge?orgId=1&from=', ROUND(EXTRACT(EPOCH FROM start_date)-10)*1000, '&to=', ROUND(EXTRACT(EPOCH FROM end_date)+10)*1000, '&var-car_id=', charging_processes.car_id, '&var-charging_process_id=', charging_processes.id) AS slotlink\nFROM charging_processes\n  INNER JOIN positions AS position ON position_id = position.id\n  LEFT JOIN addresses address ON address_id = address.id\n  LEFT JOIN geofences geofence ON geofence_id = geofence.id\nWHERE\n  $__timeFilter(charging_processes.start_date)\n  AND charging_processes.charge_energy_added > 0\n  AND charging_processes.car_id = $car_id\n  AND '🔋 Charge' in ($action_filter)\n  AND COALESCE(geofence.name, CONCAT_WS(', ', COALESCE(address.name, nullif(CONCAT_WS(' ', address.road, address.house_number), '')), address.city))::TEXT like '%$text_filter%'\nUNION\nSELECT\n  d.end_date AS \"Start\",\n  LEAD(d.start_date) over w AS \"End\",\n  ROUND(EXTRACT(EPOCH FROM d.end_date)) * 1000 AS start_date_ts,\n  ROUND(EXTRACT(EPOCH FROM LEAD(d.start_date) over w))*1000 AS end_date_ts,\n  '🅿️ Parking' AS \"Action\",\n  EXTRACT(EPOCH FROM LEAD(d.start_date) over w - d.end_date)/60 AS \"Duration\",\n  CASE WHEN d.end_geofence_id IS NULL THEN CONCAT('new?lat=', end_position.latitude, '&lng=', end_position.longitude)\n       WHEN d.end_geofence_id IS NOT NULL THEN CONCAT(d.end_geofence_id, '/edit')\n  END AS start_path,\n  NULL AS end_path,\n  COALESCE(geofence.name, CONCAT_WS(', ', COALESCE(address.name, nullif(CONCAT_WS(' ', address.road, address.house_number), '')), address.city)) AS \"Start Address\",\n  '' AS \"End Address\",\n  convert_km(end_position.odometer::NUMERIC, '$length_unit') AS odometer_$length_unit,\n  NULL AS distance_$length_unit,\n  convert_km(LEAD(d.start_[[preferred_range]]_range_km) over w::NUMERIC, '$length_unit') AS end_range_$length_unit,\n  convert_km(((LEAD(d.start_[[preferred_range]]_range_km) over w + (LEAD(d.start_km) over w - d.end_km)) - d.end_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') * efficiency AS \"kWh\",\n  convert_km(((LEAD(d.start_[[preferred_range]]_range_km) over w + (LEAD(d.start_km) over w - d.end_km)) - d.end_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') AS range_diff_$length_unit,\n  LEAD(start_position.battery_level) over w AS \"SoC\",\n  LEAD(start_position.battery_level) over w - end_position.battery_level AS \"SoC Diff\",\n  convert_celsius(outside_temp_avg, '$temp_unit') AS outside_temp_avg_$temp_unit,\n  CONCAT('d/n6g9nrMMz/voyage?orgId=1&from=', ROUND(EXTRACT(EPOCH FROM d.end_date))*1000, '&to=', ROUND(EXTRACT(EPOCH FROM LEAD(d.start_date) over w))*1000, '&var-car_id=', d.car_id) AS slotlink\nFROM\n  drives AS d\n  LEFT OUTER JOIN positions start_position on d.start_position_id = start_position.id\n  LEFT OUTER JOIN positions end_position on d.end_position_id = end_position.id\n  LEFT JOIN addresses address ON d.end_address_id = address.id\n  LEFT JOIN geofences geofence ON d.end_geofence_id = geofence.id\n  JOIN cars ON cars.id = d.car_id\nWHERE\n  $__timeFilter(d.end_date)\n  AND d.car_id=$car_id\n  AND '🅿️ Parking' in ($action_filter)\n  AND COALESCE(geofence.name, CONCAT_WS(', ', COALESCE(address.name, nullif(CONCAT_WS(' ', address.road, address.house_number), '')), address.city))::TEXT like '%$text_filter%'\nWINDOW w as (ORDER BY d.id ASC)\n\nUNION\nSELECT\n\tT1.end_date +(1 * interval '1 second') AS \"Start\", -- added 1 sec to get it after the corresponding Parking row\n\tT2.start_date AS \"End\",\n\tROUND(EXTRACT(EPOCH FROM T2.start_date)) * 1000 - 1 AS start_date_ts,\n\tROUND(EXTRACT(EPOCH FROM T2.start_date)) * 1000 - 1 AS end_date_ts,\n\t'❓'AS  \"Action\",\n\t-- EXTRACT(EPOCH FROM T2.start_date - T1.end_date)/60 AS \"Duration\",\n\tNULL AS \"Duration\",\n\tCASE WHEN T1.end_geofence_id IS NULL THEN CONCAT('new?lat=', TP1.latitude, '&lng=', TP1.longitude)\n\t\tWHEN T1.end_geofence_id IS NOT NULL THEN CONCAT(T1.end_geofence_id, '/edit')\n\tEND AS start_path,\n\tCASE WHEN T2.start_geofence_id IS NULL THEN CONCAT('new?lat=', TP2.latitude, '&lng=', TP2.longitude)\n\t\tWHEN T2.start_geofence_id IS NOT NULL THEN CONCAT(T2.start_geofence_id, '/edit')\n\tEND AS end_path,\n\tCOALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city)) AS \"Start Address\",\n\tCOALESCE(end_geofence.name, CONCAT_WS(', ', COALESCE(end_address.name, nullif(CONCAT_WS(' ', end_address.road, end_address.house_number), '')), end_address.city)) AS \"End Address\",\n\tconvert_km(TP2.odometer::INTEGER, '$length_unit') AS odometer_$length_unit,\n\tconvert_km((TP2.odometer - TP1.odometer)::INTEGER, '$length_unit') AS distance_$length_unit,\n  convert_km(T2.end_[[preferred_range]]_range_km::NUMERIC, '$length_unit') AS end_range_$length_unit,\n\tconvert_km(((TP2.[[preferred_range]]_battery_range_km + (TP2.odometer - TP1.odometer)) - TP1.[[preferred_range]]_battery_range_km)::INTEGER, '$length_unit')::INTEGER * efficiency AS \"kWh\",\n\tconvert_km(((TP2.[[preferred_range]]_battery_range_km + (TP2.odometer - TP1.odometer)) - TP1.[[preferred_range]]_battery_range_km)::INTEGER, '$length_unit') AS range_diff_$length_unit,\n\tNULL AS \"SoC\",\n\tNULL AS \"SoC Diff\",\n\tNULL AS outside_temp_avg_$temp_unit,\n\tNULL AS slotlink\n\t-- TP2.battery_level AS \"SoC\",\n\t-- TP2.battery_level-TP1.battery_level AS \"SoC Diff\",\n\t-- (T1.outside_temp_avg+T2.outside_temp_avg)/2 AS outside_temp_avg_$temp_unit\nFROM\n\t(SELECT row_number() over(ORDER BY start_date) AS time_id, * FROM drives) AS T1\n\tLEFT OUTER JOIN (SELECT row_number() over(ORDER BY start_date) AS time_id, * FROM drives ) AS T2 on T1.time_id + 1 = T2.time_id\n\tLEFT OUTER JOIN positions AS TP1 on T1.end_position_id = TP1.id\n\tLEFT OUTER JOIN positions AS TP2 on T2.start_position_id = TP2.id\n\tLEFT JOIN addresses start_address ON T1.end_address_id = start_address.id\n\tLEFT JOIN addresses end_address ON T2.start_address_id = end_address.id\n\tLEFT JOIN geofences start_geofence ON T1.end_geofence_id = start_geofence.id\n\tLEFT JOIN geofences end_geofence ON T2.start_geofence_id = end_geofence.id\n\tJOIN cars ON cars.id = T2.car_id\nWHERE\n\t$__timeFilter(T1.end_date)\n\tAND T1.car_id=$car_id \n\tAND T2.car_id=$car_id \n\tAND TP2.car_id=$car_id \n\tAND TP1.car_id=$car_id \n\tAND TP2.odometer - TP1.odometer > 0.5\n\tAND T1.end_address_id <> T2.start_address_id AND ((T1.end_geofence_id IS NOT NULL OR T2.end_geofence_id IS NOT NULL) OR T1.end_geofence_id <> T2.start_geofence_id)\n\tAND '❓' in ($action_filter)\n\tAND (\n\t  (COALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city))::TEXT like '%$text_filter%') or\n\t  (COALESCE(end_geofence.name, CONCAT_WS(', ', COALESCE(end_address.name, nullif(CONCAT_WS(' ', end_address.road, end_address.house_number), '')), end_address.city)))::TEXT like '%$text_filter%')\nUNION\nSELECT\n  start_date AS \"Start\",\n  end_date AS \"End\",\n  ROUND(EXTRACT(EPOCH FROM start_date))*1000 AS start_date_ts, \n  ROUND(EXTRACT(EPOCH FROM end_date))*1000 AS end_date_ts, \n  '💾 MàJ' AS \"Action\",\n\tEXTRACT(EPOCH FROM end_date - start_date)/60  AS \"Duration\",\n  NULL AS start_path,\n  NULL AS end_path,\n  version AS \"Start Address\",\n  '' AS \"End Address\",\n  NULL AS odometer_$length_unit,\n  NULL AS distance_$length_unit,\n  NULL AS \"SoC Diff\",\n  NULL AS end_range_$length_unit,\n  NULL AS \"kWh\",\n  NULL AS range_diff_$length_unit,\n  NULL AS \"SoC\",\n  NULL AS outside_temp_avg_$temp_unit,\n  CONCAT('https://www.notateslaapp.com/software-updates/version/', split_part(version, ' ', 1), '/release-notes') AS slotlink\nFROM updates\nWHERE \n  $__timeFilter(start_date)\n  AND car_id = $car_id \n  AND '💾 MàJ' in ($action_filter)\n  AND version::TEXT like '%$text_filter%'\n\nORDER BY \"Start\" DESC;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "id"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "candata",
          "timeColumn": "datum",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Timeline",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "End": true,
              "start_date_ts": false
            },
            "indexByName": {
              "Action": 2,
              "Duration": 7,
              "End": 1,
              "End Address": 4,
              "SoC": 15,
              "SoC Diff": 16,
              "Start": 0,
              "Start Address": 3,
              "distance_km": 8,
              "distance_mi": 9,
              "end_date_ts": 22,
              "end_path": 20,
              "end_range_km": 10,
              "end_range_mi": 11,
              "kWh": 13,
              "odometer_km": 5,
              "odometer_mi": 6,
              "outside_temp_avg_c": 17,
              "outside_temp_avg_f": 18,
              "range_diff_km": 12,
              "range_diff_mi": 13,
              "start_date_ts": 21,
              "start_path": 19
            },
            "renameByName": {
              "action": "",
              "end_address": "End",
              "km_diff": "Km",
              "kwh": "",
              "minutediff": "Time",
              "odometer": "",
              "outside_temp_avg": "Temperature",
              "rangediff": "Range Difference",
              "soc": "",
              "soc_diff": "SoC Difference",
              "start_address": "Start",
              "start_date": "Date",
              "start_date_ts": ""
            }
          }
        }
      ],
      "type": "table"
    }
  ],
  "refresh": "1h",
  "schemaVersion": 34,
  "style": "dark",
  "tags": [
    "Custom"
  ],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${TeslaMate}"
        },
        "definition": "SELECT name AS __text, id AS __value FROM cars ORDER BY display_priority ASC, name ASC;",
        "hide": 2,
        "includeAll": true,
        "label": "Car",
        "multi": false,
        "name": "car_id",
        "options": [],
        "query": "SELECT name AS __text, id AS __value FROM cars ORDER BY display_priority ASC, name ASC;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${TeslaMate}"
        },
        "definition": "select base_url from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "base_url",
        "options": [],
        "query": "select base_url from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "hide": 0,
        "includeAll": true,
        "label": "État",
        "multi": true,
        "name": "action_filter",
        "options": [
          {
            "selected": true,
            "text": "All",
            "value": "$__all"
          },
          {
            "selected": false,
            "text": "🚗 Conduite",
            "value": "🚗 Conduite"
          },
          {
            "selected": false,
            "text": "🔋 Charge",
            "value": "🔋 Charge"
          },
          {
            "selected": false,
            "text": "🅿️ Parking",
            "value": "🅿️ Parking"
          },
          {
            "selected": false,
            "text": "❓",
            "value": "❓"
          },
          {
            "selected": false,
            "text": "💾 MàJ",
            "value": "💾 MàJ"
          }
        ],
        "query": "🚗 Conduite,🔋 Charge,🅿️ Parking,❓,💾 MàJ",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "hide": 0,
        "label": "Adresse",
        "name": "text_filter",
        "options": [
          {
            "selected": true,
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${TeslaMate}"
        },
        "definition": "select unit_of_length from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "label": "length unit",
        "multi": false,
        "name": "length_unit",
        "options": [],
        "query": "select unit_of_length from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${TeslaMate}"
        },
        "definition": "select unit_of_temperature from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "label": "temperature unit",
        "multi": false,
        "name": "temp_unit",
        "options": [],
        "query": "select unit_of_temperature from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${TeslaMate}"
        },
        "definition": "select preferred_range from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "preferred_range",
        "options": [],
        "query": "select preferred_range from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-14d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Timeline",
  "uid": "davVH4eGz",
  "version": 8,
  "weekStart": ""
}