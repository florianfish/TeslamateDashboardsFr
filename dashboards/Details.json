{
  "__inputs": [
    {
      "name": "DS_TESLAMATE",
      "label": "TeslaMate",
      "description": "",
      "type": "datasource",
      "pluginId": "postgres",
      "pluginName": "PostgreSQL"
    }
  ],
  "__elements": [],
  "__requires": [
    {
      "type": "panel",
      "id": "bargauge",
      "name": "Bar gauge",
      "version": ""
    },
    {
      "type": "panel",
      "id": "gauge",
      "name": "Gauge",
      "version": ""
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "8.3.4"
    },
    {
      "type": "datasource",
      "id": "postgres",
      "name": "PostgreSQL",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "state-timeline",
      "name": "State timeline",
      "version": ""
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "$$hashKey": "object:286",
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "Un résumé détaillé de la voiture",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1643283834639,
  "links": [
    {
      "$$hashKey": "object:143",
      "icon": "doc",
      "includeVars": false,
      "tags": [],
      "targetBlank": true,
      "title": "Dernière Charge",
      "type": "link",
      "url": "/d/Qco-Wk7Mk?from=$from"
    },
    {
      "$$hashKey": "object:1037",
      "icon": "dashboard",
      "tags": [],
      "title": "TeslaMate",
      "tooltip": "",
      "type": "link",
      "url": "[[base_url:raw]]"
    },
    {
      "$$hashKey": "object:1038",
      "asDropdown": true,
      "icon": "external link",
      "tags": [
        "Custom"
      ],
      "title": "Dashboards",
      "type": "dashboards"
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 18,
      "panels": [],
      "repeat": "car",
      "title": "$car",
      "type": "row"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "displayName": "",
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-red",
                "value": null
              },
              {
                "color": "semi-dark-yellow",
                "value": 5
              },
              {
                "color": "semi-dark-green",
                "value": 20
              },
              {
                "color": "light-blue",
                "value": 81
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 10,
        "x": 0,
        "y": 1
      },
      "id": 4,
      "options": {
        "displayMode": "gradient",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": false,
        "text": {}
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "(SELECT battery_level, date\nFROM positions\nWHERE car_id = $car\nORDER BY date DESC\nLIMIT 1)\nUNION\nSELECT battery_level, date\nFROM charges c\nJOIN charging_processes p ON p.id = c.charging_process_id\nWHERE $__timeFilter(date) AND p.car_id = $car\nORDER BY date DESC\nLIMIT 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "battery_level"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "positions",
          "timeColumn": "date",
          "timeColumnType": "timestamp",
          "where": []
        }
      ],
      "title": "Niveau de Batterie",
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 0,
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Autonomie Théorique"
            },
            "properties": [
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "unit",
                "value": "lengthkm"
              }
            ]
          },
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "Niveau de Batterie"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 14,
        "x": 10,
        "y": 1
      },
      "id": 24,
      "links": [
        {
          "title": "Détails du Trajet",
          "url": "/d/AFPp7rGMz/details-du-trajet?orgId=1"
        }
      ],
      "options": {
        "legend": {
          "calcs": [
            "lastNotNull",
            "max",
            "min"
          ],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "(\n  SELECT $__timeGroup(date, '5s'), avg(battery_level) as \"Niveau de Batterie\", convert_km(avg([[preferred_range]]_battery_range_km), '$length_unit') as \"Autonomie Théorique\"\n  FROM positions\n  WHERE date BETWEEN ($__timeFrom()::timestamp) AND ($__timeTo()::timestamp)\n  GROUP BY 1\n) UNION ALL (\n  SELECT $__timeGroup(date, '5s'), avg(battery_level) as \"Niveau de Batterie\", convert_km(avg([[preferred_range]]_battery_range_km), '$length_unit') as \"$Autonomie Théorique\"\n  FROM charges\n  WHERE date BETWEEN ($__timeFrom()::timestamp) AND ($__timeTo()::timestamp)\n  GROUP BY 1\n)\nORDER BY 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "latitude"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "addresses",
          "timeColumn": "inserted_at",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Niveau de Batterie",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "description": "À gauche, l'autonomie affichée par la voiture.\n\n\nÀ droite, le typique théorique avec une batterie sans dégradation (Typique 100 % = $autonomie_max km)",
      "fieldConfig": {
        "defaults": {
          "decimals": 2,
          "displayName": " ",
          "mappings": [],
          "max": 500,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-red",
                "value": null
              },
              {
                "color": "light-yellow",
                "value": 50
              },
              {
                "color": "light-green",
                "value": 100
              },
              {
                "color": "light-blue",
                "value": 400
              }
            ]
          },
          "unit": "lengthkm"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 0,
        "y": 3
      },
      "id": 21,
      "links": [
        {
          "title": "Voir l'évolution de l'autonomie affichée à 100 %",
          "url": "/d/-0yln9MMz/"
        }
      ],
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "vertical",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": true
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "(SELECT convert_km([[preferred_range]]_battery_range_km, '$length_unit'), battery_level*$autonomie_max/100, date\nFROM positions\nWHERE car_id = $car AND [[preferred_range]]_battery_range_km IS NOT NULL\nORDER BY date DESC\nLIMIT 1)\nUNION\nSELECT convert_km([[preferred_range]]_battery_range_km, '$length_unit'), battery_level*$autonomie_max/100, date\nFROM charges c\nJOIN charging_processes p ON p.id = c.charging_process_id\nWHERE $__timeFilter(date) AND p.car_id = $car AND [[preferred_range]]_battery_range_km IS NOT NULL\nORDER BY date DESC\nLIMIT 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "battery_level"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "positions",
          "timeColumn": "date",
          "timeColumnType": "timestamp",
          "where": []
        }
      ],
      "title": "Autonomie Affichée vs. Typique",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "description": "Calcul de la dégradation affichée en prenant en compte l'écart en kilomètres par rapport au typique, et le niveau de batterie. \n\nPour rappel le typique 100 % est $autonomie_max km.",
      "fieldConfig": {
        "defaults": {
          "decimals": 2,
          "displayName": "",
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "max": 0.1,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "light-blue",
                "value": 0.01
              },
              {
                "color": "light-orange",
                "value": 0.05
              },
              {
                "color": "semi-dark-red",
                "value": 0.075
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 5,
        "y": 3
      },
      "id": 22,
      "links": [],
      "options": {
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "text": {}
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "(SELECT (battery_level*$autonomie_max/100-convert_km([[preferred_range]]_battery_range_km, '$length_unit'))/(battery_level*$autonomie_max/100), date\nFROM positions\nWHERE car_id = $car AND [[preferred_range]]_battery_range_km IS NOT NULL AND battery_level IS NOT NULL\nORDER BY date DESC\nLIMIT 1)\nUNION\nSELECT (battery_level*$autonomie_max/100-convert_km([[preferred_range]]_battery_range_km, '$length_unit'))/(battery_level*$autonomie_max/100), date\nFROM charges c\nJOIN charging_processes p ON p.id = c.charging_process_id\nWHERE $__timeFilter(date) AND p.car_id = $car AND [[preferred_range]]_battery_range_km IS NOT NULL AND battery_level IS NOT NULL\nORDER BY date DESC\nLIMIT 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "battery_level"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "positions",
          "timeColumn": "date",
          "timeColumnType": "timestamp",
          "where": []
        }
      ],
      "title": "Dégradation Affichée",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [],
          "max": 250,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-green",
                "value": null
              }
            ]
          },
          "unit": "kwatt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 0,
        "y": 7
      },
      "id": 11,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "firstNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "text": {}
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH charging_process AS (\n  SELECT id, end_date\n  FROM charging_processes\n  WHERE car_id = $car\n  ORDER BY start_date DESC\n  LIMIT 1\n)\nSELECT\n  $__time(date),\n  CASE WHEN charging_process.end_date IS NULL THEN charger_power\n       ELSE 0\n  END AS \"Power [kW]\"\nFROM charges, charging_process\nWHERE charging_process.id = charging_process_id\nORDER BY date DESC\nLIMIT 1;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "outside_temp"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "positions",
          "timeColumn": "date",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Puissance de Charge",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [],
          "max": 260,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-green",
                "value": null
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 5,
        "y": 7
      },
      "id": 10,
      "links": [],
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "firstNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH charging_process AS (\n  SELECT id, end_date\n  FROM charging_processes\n  WHERE car_id = $car\n  ORDER BY start_date DESC\n  LIMIT 1\n)\nSELECT\n  $__time(date),\n  CASE WHEN charging_process.end_date IS NULL THEN charger_voltage\n       ELSE 0\n  END AS \"Charging Voltage [V]\"\nFROM charges, charging_process\nWHERE charging_process.id = charging_process_id\nORDER BY date DESC\nLIMIT 1;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "outside_temp"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "positions",
          "timeColumn": "date",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Tension de Charge",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "stepAfter",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 0,
          "links": [],
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Puissance [kW]"
            },
            "properties": [
              {
                "id": "unit",
                "value": "kwatt"
              }
            ]
          },
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "Puissance [kW]"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 14,
        "x": 10,
        "y": 7
      },
      "id": 15,
      "links": [
        {
          "targetBlank": true,
          "title": "Détails de la Charge",
          "url": "/d/joS3WrMMz/details-de-la-charge?orgId=1"
        }
      ],
      "options": {
        "legend": {
          "calcs": [
            "mean",
            "max",
            "min"
          ],
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  $__time(date),\n  charger_power as \"Puissance [kW]\",\n  charger_actual_current as \"Intensité [A]\"\nFROM\n  charges c\njoin\n  charging_processes p ON p.id = c.charging_process_id \nWHERE\n  $__timeFilter(date) and\n  p.car_id = $car\nORDER BY\n  date ASC",
          "refId": "B",
          "select": [
            [
              {
                "params": [
                  "latitude"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "positions",
          "timeColumn": "date",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        },
        {
          "format": "time_series",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  $__time(date),\n  charger_voltage as \"Tension de Charge [V]\"\nFROM\n  charges c\njoin\n  charging_processes p ON p.id = c.charging_process_id \nWHERE\n  $__timeFilter(date) and\n  p.car_id = $car\nORDER BY\n  date ASC",
          "refId": "C",
          "select": [
            [
              {
                "params": [
                  "latitude"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "positions",
          "timeColumn": "date",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Détails de la Charge",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 0,
        "y": 11
      },
      "id": 2,
      "links": [
        {
          "targetBlank": true,
          "title": "Mises à Jour",
          "url": "/d/q5cNJMhGz/mises-a-jour?orgId=1"
        }
      ],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "first"
          ],
          "fields": "/.*/",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select LEFT(version,10) \nfrom updates \nwhere car_id = $car \norder by start_date desc limit 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "efficiency"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "cars",
          "timeColumn": "inserted_at",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Version du Logiciel",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "km"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 5,
        "y": 11
      },
      "id": 6,
      "links": [
        {
          "targetBlank": true,
          "title": "Odomètre",
          "url": "/d/hRhQ7rGMz/odometre?orgId=1"
        }
      ],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "first"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select $__time(date), convert_km(odometer::numeric, '$length_unit') from positions where car_id = $car order by date desc limit 1;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Odomètre",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [],
          "max": 30,
          "min": 15,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 19
              },
              {
                "color": "dark-red",
                "value": 25
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 0,
        "y": 13
      },
      "id": 16,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "firstNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "text": {}
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n\t$__time(date),\n\tconvert_celsius(driver_temp_setting, '$temp_unit') as \"Driver Temperature [°$temp_unit]\"\nFROM positions\nWHERE car_id = $car AND [[preferred_range]]_battery_range_km IS NOT NULL\nORDER BY date DESC\nLIMIT 1;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "outside_temp"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "positions",
          "timeColumn": "date",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Consigne de Température",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [],
          "max": 60,
          "min": -20,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 10
              },
              {
                "color": "dark-red",
                "value": 30
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 3,
        "y": 13
      },
      "id": 8,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "firstNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "text": {}
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH last_position AS (\n\tSELECT date, convert_celsius(outside_temp, '$temp_unit') AS \"Outside Temperature [°$temp_unit]\"\n\tFROM positions\n\tWHERE car_id = $car AND outside_temp IS NOT NULL\n\tORDER BY date DESC\n\tLIMIT 1\n),\nlast_charge AS (\n\tSELECT date, convert_celsius(outside_temp, '$temp_unit') AS \"Outside Temperature [°$temp_unit]\"\n\tFROM charges\n\tJOIN charging_processes ON charges.charging_process_id = charging_processes.id\n\tWHERE car_id = $car AND outside_temp IS NOT NULL\n\tORDER BY date DESC\n\tLIMIT 1\n)\nSELECT * FROM last_position\nUNION ALL\nSELECT * FROM last_charge\nORDER BY date DESC\nLIMIT 1;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "outside_temp"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "positions",
          "timeColumn": "date",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Température Extérieure",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TESLAMATE}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [],
          "max": 70,
          "min": -20,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 15
              },
              {
                "color": "dark-red",
                "value": 35
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 7,
        "y": 13
      },
      "id": 9,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "firstNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "text": {}
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  date,\n  convert_celsius(inside_temp, '$temp_unit') AS \"Inside Temperature [°$temp_unit]\"\nFROM positions\nWHERE\n  car_id = $car\n  and inside_temp is not null\norder by date desc\nlimit 1 ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "outside_temp"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "positions",
          "timeColumn": "date",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Température Intérieure",
      "type": "gauge"
    },
    {
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "filterable": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Début"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dateTimeAsLocal"
              },
              {
                "id": "custom.width",
                "value": 170
              },
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "d/n6g9nrMMz/voyage?orgId=1&from=${__data.fields.start_date_ts}&to=${__data.fields.end_date_ts}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SoC"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 70
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "displayName",
                "value": "🔋Fin"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Delta SoC"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 70
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "displayName",
                "value": "Delta 🔋"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_path"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "range_diff_km"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 150
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "État"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 10
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "🔋"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 80
              },
              {
                "id": "unit",
                "value": "kwatth"
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "End"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dateTimeAsLocal"
              },
              {
                "id": "custom.width",
                "value": 152
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Durée"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dtdurations"
              },
              {
                "id": "custom.width"
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Départ"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "[[base_url:raw]]/geo-fences/${__data.fields.start_path}"
                  }
                ]
              },
              {
                "id": "custom.width",
                "value": 98
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Arrivée"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Create or edit geo-fence",
                    "url": "[[base_url:raw]]/geo-fences/${__data.fields.end_path}"
                  }
                ]
              },
              {
                "id": "custom.width",
                "value": 87
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_date_ts"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "end_date_ts"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Odomètre"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "Distance"
            },
            "properties": [
              {
                "id": "unit",
                "value": "km"
              },
              {
                "id": "custom.width",
                "value": 80
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_mi/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "mi"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "T°"
            },
            "properties": [
              {
                "id": "unit",
                "value": "celsius"
              },
              {
                "id": "custom.width"
              },
              {
                "id": "custom.align",
                "value": "left"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_f/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "fahrenheit"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "Odomètre"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Odomètre"
              },
              {
                "id": "custom.width",
                "value": 100
              },
              {
                "id": "unit",
                "value": "km"
              },
              {
                "id": "decimals",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/distance_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Distance"
              },
              {
                "id": "custom.width",
                "value": 20
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/range_diff_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Autonomie Typique"
              },
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "unit",
                "value": "lengthkm"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/outside_temp_avg_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Temperature"
              },
              {
                "id": "custom.width"
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_path"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "end_path"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Soc début"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 75
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "displayName",
                "value": "🔋Début"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 17
      },
      "id": 26,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "8.3.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  start_date AS \"Start\",\n  end_date AS \"End\",\n  ROUND(EXTRACT(EPOCH FROM start_date))*1000 AS start_date_ts,\n  ROUND(EXTRACT(EPOCH FROM end_date))*1000 AS end_date_ts,\n  '🚗' AS \"Action\",\n  drives.duration_min * 60 AS \"Duration\",\n  CASE WHEN start_geofence_id IS NULL THEN CONCAT('new?lat=', TP1.latitude, '&lng=', TP1.longitude)\n       WHEN start_geofence_id IS NOT NULL THEN CONCAT(start_geofence_id, '/edit')\n  END AS start_path,\n  CASE WHEN end_geofence_id IS NULL THEN CONCAT('new?lat=', TP2.latitude, '&lng=', TP2.longitude)\n       WHEN start_geofence_id IS NOT NULL THEN CONCAT(end_geofence_id, '/edit')\n  END AS end_path,\n  COALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city)) AS \"Start Address\",\n  COALESCE(end_geofence.name, CONCAT_WS(', ', COALESCE(end_address.name, nullif(CONCAT_WS(' ', end_address.road, end_address.house_number), '')), end_address.city)) AS \"End Address\",\n  convert_km(start_km::NUMERIC, '$length_unit') AS odometer_$length_unit,\n  convert_km(distance::NUMERIC, '$length_unit') AS distance_$length_unit,\n  convert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') * cars.efficiency AS \"kWh\",\n  convert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') AS range_diff_$length_unit,\n  TP1.battery_level AS \"SoC start\",\n  TP2.battery_level AS \"SoC\",\n  TP2.battery_level-TP1.battery_level AS \"SoC Diff\",\n  convert_celsius(outside_temp_avg, '$temp_unit') AS outside_temp_avg_$temp_unit\nFROM drives\n  LEFT OUTER JOIN positions AS TP1 on drives.start_position_id = TP1.id\n  LEFT OUTER JOIN positions AS TP2 on drives.end_position_id = TP2.id\n  LEFT JOIN addresses start_address ON start_address_id = start_address.id\n  LEFT JOIN addresses end_address ON  end_address_id = end_address.id\n  LEFT JOIN geofences start_geofence ON start_geofence_id = start_geofence.id\n  LEFT JOIN geofences end_geofence ON end_geofence_id = end_geofence.id\n  JOIN cars ON cars.id = drives.car_id\nWHERE \n  $__timeFilter(drives.start_date)\n  AND drives.car_id = 1\n--  AND (\"Start Address\"::TEXT like '%$text_filter%' or \"End Address\"::TEXT like '%$text_filter%')\n\nUNION\nSELECT\n  start_date AS \"Start\",\n  end_date AS \"End\",\n  ROUND(EXTRACT(EPOCH FROM start_date))*1000 AS start_date_ts,\n  ROUND(EXTRACT(EPOCH FROM end_date))*1000 AS end_date_ts,\n  '🔋' AS \"Action\",\n  charging_processes.duration_min * 60 AS \"Duration\",\n  CASE WHEN geofence_id IS NULL THEN CONCAT('new?lat=', address.latitude, '&lng=', address.longitude)\n       WHEN geofence_id IS NOT NULL THEN CONCAT(geofence_id, '/edit')\n  END AS start_path,\n  NULL AS end_path,\n  COALESCE(geofence.name, CONCAT_WS(', ', COALESCE(address.name, nullif(CONCAT_WS(' ', address.road, address.house_number), '')), address.city)) AS \"Start Address\",\n  '' AS \"End Address\",\n  convert_km(position.odometer::NUMERIC, '$length_unit') AS odometer_$length_unit,\n  NULL AS distance_$length_unit,\n  convert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') * cars.efficiency AS \"kWh\",\n  convert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') AS range_diff_$length_unit, \n  start_battery_level AS \"SoC\",\n  end_battery_level AS \"SoC start\",\n  end_battery_level - start_battery_level AS \"SoC Diff\",\n  convert_celsius(outside_temp_avg, '$temp_unit') AS outside_temp_avg_$temp_unit\nFROM charging_processes\n  INNER JOIN positions AS position ON position_id = position.id\n  LEFT JOIN addresses address ON address_id = address.id\n  LEFT JOIN geofences geofence ON geofence_id = geofence.id\n  LEFT JOIN cars on cars.id = charging_processes.car_id\nWHERE\n  $__timeFilter(charging_processes.start_date)\n  AND charging_processes.car_id = 1\n\nUNION\nSELECT\n  d.end_date AS \"Start\",\n  LEAD(d.start_date) over w AS \"End\",\n  ROUND(EXTRACT(EPOCH FROM d.end_date)) * 1000 AS start_date_ts,\n  ROUND(EXTRACT(EPOCH FROM LEAD(d.start_date) over w))*1000 AS end_date_ts,\n  '🅿️' AS \"Action\",\n  EXTRACT(EPOCH FROM LEAD(d.start_date) over w - d.end_date) AS \"Duration\",\n  CASE WHEN d.end_geofence_id IS NULL THEN CONCAT('new?lat=', end_position.latitude, '&lng=', end_position.longitude)\n       WHEN d.end_geofence_id IS NOT NULL THEN CONCAT(d.end_geofence_id, '/edit')\n  END AS start_path,\n  NULL AS end_path,\n  COALESCE(geofence.name, CONCAT_WS(', ', COALESCE(address.name, nullif(CONCAT_WS(' ', address.road, address.house_number), '')), address.city)) AS \"Start Address\",\n  '' AS \"End Address\",\n  convert_km(end_position.odometer::NUMERIC, '$length_unit') AS odometer_$length_unit,\n  NULL AS distance_$length_unit,\n  convert_km(((LEAD(d.start_[[preferred_range]]_range_km) over w + (LEAD(d.start_km) over w - d.end_km)) - d.end_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') * efficiency AS \"kWh\",\n  convert_km(((LEAD(d.start_[[preferred_range]]_range_km) over w + (LEAD(d.start_km) over w - d.end_km)) - d.end_[[preferred_range]]_range_km)::NUMERIC, '$length_unit') AS range_diff_$length_unit,\n  end_position.battery_level  AS \"SoC\",\n  LEAD(start_position.battery_level) over w AS \"SoC start\",\n  LEAD(start_position.battery_level) over w - end_position.battery_level AS \"SoC Diff\",\n  convert_celsius(outside_temp_avg, '$temp_unit') AS outside_temp_avg_$temp_unit\nFROM\n  drives AS d\n  LEFT OUTER JOIN positions start_position on d.start_position_id = start_position.id\n  LEFT OUTER JOIN positions end_position on d.end_position_id = end_position.id\n  LEFT JOIN addresses address ON d.end_address_id = address.id\n  LEFT JOIN geofences geofence ON d.end_geofence_id = geofence.id\n  JOIN cars ON cars.id = d.car_id\nWHERE\n  $__timeFilter(d.end_date)\n  AND d.car_id=1\n\nWINDOW w as (ORDER BY d.id ASC)\n\nUNION\nSELECT\n  start_date AS \"Start\",\n  start_date AS \"End\",\n  ROUND(EXTRACT(EPOCH FROM start_date))*1000 AS start_date_ts, \n  ROUND(EXTRACT(EPOCH FROM start_date))*1000 AS end_date_ts, \n  '💾' AS \"Action\",\n  NULL AS distance_$length_unit,\n  NULL AS start_path,\n  NULL AS end_path,\n  version AS \"Start Address\",\n  '' AS \"End Address\",\n  NULL AS odometer_$length_unit,\n  NULL AS \"Distance\", \n  NULL AS \"kWh\",\n  NULL AS range_diff_$length_unit,\n  NULL AS \"SoC\",\n  NULL AS \"SoC start\",\n  NULL AS \"SoC Diff\",\n  NULL AS outside_temp_avg_$temp_unit\nFROM updates\nWHERE \n  $__timeFilter(start_date)\n  AND car_id = 1\n\nORDER BY \"Start\" DESC;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "id"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "candata",
          "timeColumn": "datum",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Timeline",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "End": true,
              "end_date_ts": false,
              "end_path": false,
              "start_date_ts": false,
              "start_path": false
            },
            "indexByName": {
              "Action": 2,
              "Duration": 5,
              "End": 1,
              "End Address": 4,
              "SoC": 9,
              "SoC Diff": 10,
              "SoC start": 8,
              "Start": 0,
              "Start Address": 3,
              "distance_km": 6,
              "end_date_ts": 17,
              "end_path": 15,
              "kWh": 11,
              "odometer_km": 12,
              "outside_temp_avg_c": 13,
              "range_diff_km": 7,
              "start_date_ts": 16,
              "start_path": 14
            },
            "renameByName": {
              "Action": "État",
              "Duration": "Durée",
              "End": "Fin",
              "End Address": "Arrivée",
              "SoC": "SoC",
              "SoC Diff": "Delta SoC",
              "SoC start": "Soc début",
              "Start": "Début",
              "Start Address": "Départ",
              "action": "",
              "distance_km": "Distance",
              "end_address": "End",
              "kWh": "🔋",
              "km_diff": "Km",
              "kwh": "",
              "minutediff": "Time",
              "odometer": "",
              "odometer_km": "Odomètre",
              "outside_temp_avg": "Temperature",
              "outside_temp_avg_c": "T°",
              "range_diff_km": "",
              "rangediff": "Range Difference",
              "soc": "",
              "soc_diff": "SoC Difference",
              "start_address": "Start",
              "start_date": "Date",
              "start_date_ts": "",
              "start_path": ""
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "custom": {
            "fillOpacity": 70,
            "lineWidth": 0
          },
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "super-light-blue",
                  "index": 0,
                  "text": "En Ligne"
                },
                "1": {
                  "color": "semi-dark-purple",
                  "index": 1,
                  "text": "Conduite"
                },
                "2": {
                  "color": "yellow",
                  "index": 2,
                  "text": "En Charge"
                },
                "3": {
                  "color": "semi-dark-orange",
                  "index": 3,
                  "text": "Hors Ligne"
                },
                "4": {
                  "color": "green",
                  "index": 4,
                  "text": "Endormie"
                },
                "5": {
                  "color": "super-light-blue",
                  "index": 5,
                  "text": "En Ligne"
                },
                "6": {
                  "color": "red",
                  "index": 6,
                  "text": "MàJ"
                },
                "null": {
                  "index": 7,
                  "text": "N/A"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 24
      },
      "id": 32,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom"
        },
        "mergeValues": true,
        "rowHeight": 0.9,
        "showValue": "auto",
        "tooltip": {
          "mode": "single"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TESLAMATE}"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH states AS (\n  SELECT\n    unnest(ARRAY [start_date, end_date]) AS date,\n    unnest(ARRAY [2, 0]) AS state\n  FROM charging_processes\n  WHERE\n    car_id = 1 AND \n    ($__timeFrom() :: timestamp - interval '30 day') < start_date AND \n    (end_date < ($__timeTo() :: timestamp + interval '30 day') OR end_date IS NULL)\n  UNION\n  SELECT\n    unnest(ARRAY [start_date, end_date]) AS date,\n    unnest(ARRAY [1, 0]) AS state\n  FROM drives\n  WHERE\n    car_id = 1 AND \n    ($__timeFrom() :: timestamp - interval '30 day') < start_date AND \n    (end_date < ($__timeTo() :: timestamp + interval '30 day') OR end_date IS NULL)\n  UNION\n  SELECT\n    start_date AS date,\n    CASE\n      WHEN state = 'offline' THEN 3\n      WHEN state = 'asleep' THEN 4\n      WHEN state = 'online' THEN 5\n    END AS state\n  FROM states\n  WHERE\n    car_id = 1 AND \n    ($__timeFrom() :: timestamp - interval '30 day') < start_date AND \n    (end_date < ($__timeTo() :: timestamp + interval '30 day') OR end_date IS NULL)\n  UNION\n  SELECT\n    unnest(ARRAY [start_date, end_date]) AS date,\n    unnest(ARRAY [6, 0]) AS state\n  FROM updates\n  WHERE\n    car_id = 1 AND \n    ($__timeFrom() :: timestamp - interval '30 day') < start_date AND \n    (end_date < ($__timeTo() :: timestamp + interval '30 day') OR end_date IS NULL)\n)\nSELECT date AS \"time\", state\nFROM states\nWHERE \n  date IS NOT NULL AND\n  ($__timeFrom() :: timestamp - interval '30 day') < date AND \n  date < ($__timeTo() :: timestamp + interval '30 day') \nORDER BY date ASC, state ASC;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "latitude"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "addresses",
          "timeColumn": "inserted_at",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "États",
      "type": "state-timeline"
    }
  ],
  "refresh": "30s",
  "schemaVersion": 34,
  "style": "dark",
  "tags": [
    "Custom"
  ],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "SELECT name AS __text, id AS __value FROM cars;",
        "hide": 2,
        "includeAll": true,
        "label": "Car",
        "multi": true,
        "name": "car",
        "options": [],
        "query": "SELECT name AS __text, id AS __value FROM cars;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 5,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "select unit_of_length from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "length_unit",
        "options": [],
        "query": "select unit_of_length from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "select unit_of_temperature from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "temp_unit",
        "options": [],
        "query": "select unit_of_temperature from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "select preferred_range from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "preferred_range",
        "options": [],
        "query": "select preferred_range from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "select base_url from settings limit 1;",
        "hide": 2,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "base_url",
        "options": [],
        "query": "select base_url from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_TESLAMATE}"
        },
        "definition": "with last_drives as (select start_date from charging_processes order by start_date desc limit 1)\nselect extract(epoch from min(start_date)) * 1000 from last_drives;",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "from",
        "options": [],
        "query": "with last_drives as (select start_date from charging_processes order by start_date desc limit 1)\nselect extract(epoch from min(start_date)) * 1000 from last_drives;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": false,
          "text": "499",
          "value": "499"
        },
        "hide": 2,
        "name": "autonomie_max",
        "options": [
          {
            "selected": true,
            "text": "499",
            "value": "499"
          }
        ],
        "query": "499",
        "skipUrlSync": false,
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {
    "hidden": false,
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "Détails",
  "uid": "_hK63JwGk",
  "version": 7,
  "weekStart": ""
}